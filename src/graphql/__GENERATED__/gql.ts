/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n    query GetPage($slug: SlugFilter) {\n        page(filter: { slug: $slug }) {\n            id\n            title\n            defaultColor {\n                hex\n            }\n            metaTags {\n                image {\n                    url\n                    alt\n                }\n                title\n                description\n                twitterCard\n            }\n            sections {\n                ... on FaqSectionRecord {\n                    id\n                    faqSection {\n                        question\n                        id\n                        answer\n                    }\n                }\n                ... on TilesSectionRecord {\n                    id\n                    description\n                    tiles {\n                        id\n                        text\n                    }\n                }\n                ... on StepperSectionRecord {\n                    id\n                    title\n                    backgroundColor {\n                        hex\n                    }\n                    steps {\n                        name\n                        description\n                        icon {\n                            url\n                            alt\n                        }\n                    }\n                }\n                ... on RichTextSectionRecord {\n                    id\n                    imagePosition\n                    title\n                    content\n                    image {\n                        url\n                        alt\n                    }\n                }\n                ... on NavigationRecord {\n                    id\n                    links {\n                        id\n                        title\n                        slug\n                    }\n                }\n                ... on HeroSectionRecord {\n                    id\n                    elements {\n                        title\n                        id\n                        description\n                        backgroundImage {\n                            url\n                            alt\n                        }\n                    }\n                }\n            }\n        }\n    }\n": types.GetPageDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query GetPage($slug: SlugFilter) {\n        page(filter: { slug: $slug }) {\n            id\n            title\n            defaultColor {\n                hex\n            }\n            metaTags {\n                image {\n                    url\n                    alt\n                }\n                title\n                description\n                twitterCard\n            }\n            sections {\n                ... on FaqSectionRecord {\n                    id\n                    faqSection {\n                        question\n                        id\n                        answer\n                    }\n                }\n                ... on TilesSectionRecord {\n                    id\n                    description\n                    tiles {\n                        id\n                        text\n                    }\n                }\n                ... on StepperSectionRecord {\n                    id\n                    title\n                    backgroundColor {\n                        hex\n                    }\n                    steps {\n                        name\n                        description\n                        icon {\n                            url\n                            alt\n                        }\n                    }\n                }\n                ... on RichTextSectionRecord {\n                    id\n                    imagePosition\n                    title\n                    content\n                    image {\n                        url\n                        alt\n                    }\n                }\n                ... on NavigationRecord {\n                    id\n                    links {\n                        id\n                        title\n                        slug\n                    }\n                }\n                ... on HeroSectionRecord {\n                    id\n                    elements {\n                        title\n                        id\n                        description\n                        backgroundImage {\n                            url\n                            alt\n                        }\n                    }\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetPage($slug: SlugFilter) {\n        page(filter: { slug: $slug }) {\n            id\n            title\n            defaultColor {\n                hex\n            }\n            metaTags {\n                image {\n                    url\n                    alt\n                }\n                title\n                description\n                twitterCard\n            }\n            sections {\n                ... on FaqSectionRecord {\n                    id\n                    faqSection {\n                        question\n                        id\n                        answer\n                    }\n                }\n                ... on TilesSectionRecord {\n                    id\n                    description\n                    tiles {\n                        id\n                        text\n                    }\n                }\n                ... on StepperSectionRecord {\n                    id\n                    title\n                    backgroundColor {\n                        hex\n                    }\n                    steps {\n                        name\n                        description\n                        icon {\n                            url\n                            alt\n                        }\n                    }\n                }\n                ... on RichTextSectionRecord {\n                    id\n                    imagePosition\n                    title\n                    content\n                    image {\n                        url\n                        alt\n                    }\n                }\n                ... on NavigationRecord {\n                    id\n                    links {\n                        id\n                        title\n                        slug\n                    }\n                }\n                ... on HeroSectionRecord {\n                    id\n                    elements {\n                        title\n                        id\n                        description\n                        backgroundImage {\n                            url\n                            alt\n                        }\n                    }\n                }\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;